// Generated by @wagmi/cli@0.1.15 on 4/27/2023 at 1:20:30 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erc20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// snews
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const snewsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'readerAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tokenValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'transactionId',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ClaimToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'ownerAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'slug', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'totalSupply',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paymentToken',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'CreateNews',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WRITER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_resolver', internalType: 'address', type: 'address' }],
    name: '__Snews_init',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'approveWriterRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'slug', internalType: 'string', type: 'string' },
      { name: 'transactionId', internalType: 'string', type: 'string' },
      {
        name: '_signature',
        internalType: 'struct ISnews.EIP712Signature',
        type: 'tuple',
        components: [
          { name: 'deadline', internalType: 'uint256', type: 'uint256' },
          { name: 'v', internalType: 'uint8', type: 'uint8' },
          { name: 'r', internalType: 'bytes32', type: 'bytes32' },
          { name: 's', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'claimToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'slug', internalType: 'string', type: 'string' },
      { name: '_pt', internalType: 'uint8', type: 'uint8' },
      { name: 'totalSupply', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createNews',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'newsFund',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'newsStorage',
    outputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'slug', internalType: 'string', type: 'string' },
      { name: 'totalSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'paymentToken', internalType: 'uint8', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'resolver',
    outputs: [
      { name: '', internalType: 'contract IResolver', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_signer', internalType: 'address', type: 'address' }],
    name: 'setSigner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'slugStorage',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'tokenWithDrawalNonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'userClaimNews',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TSelectData = ReadContractResult<typeof erc20ABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TSelectData = ReadContractResult<typeof erc20ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TSelectData = ReadContractResult<typeof erc20ABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TSelectData = ReadContractResult<typeof erc20ABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TSelectData = ReadContractResult<typeof erc20ABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TSelectData = ReadContractResult<typeof erc20ABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link snewsABI}__.
 */
export function useSnews(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: snewsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__.
 */
export function useSnewsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof snewsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: snewsABI, ...config } as UseContractReadConfig<
    typeof snewsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useSnewsDefaultAdminRole<
  TSelectData = ReadContractResult<typeof snewsABI, 'DEFAULT_ADMIN_ROLE'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'DEFAULT_ADMIN_ROLE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof snewsABI,
    'DEFAULT_ADMIN_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"WRITER_ROLE"`.
 */
export function useSnewsWriterRole<
  TSelectData = ReadContractResult<typeof snewsABI, 'WRITER_ROLE'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'WRITER_ROLE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'WRITER_ROLE',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'WRITER_ROLE', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useSnewsBalanceOf<
  TSelectData = ReadContractResult<typeof snewsABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"getApproved"`.
 */
export function useSnewsGetApproved<
  TSelectData = ReadContractResult<typeof snewsABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'getApproved', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useSnewsGetRoleAdmin<
  TSelectData = ReadContractResult<typeof snewsABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useSnewsHasRole<
  TSelectData = ReadContractResult<typeof snewsABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useSnewsIsApprovedForAll<
  TSelectData = ReadContractResult<typeof snewsABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'isApprovedForAll', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"name"`.
 */
export function useSnewsName<
  TSelectData = ReadContractResult<typeof snewsABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"newsFund"`.
 */
export function useSnewsNewsFund<
  TSelectData = ReadContractResult<typeof snewsABI, 'newsFund'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'newsFund', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'newsFund',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'newsFund', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"newsStorage"`.
 */
export function useSnewsNewsStorage<
  TSelectData = ReadContractResult<typeof snewsABI, 'newsStorage'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'newsStorage', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'newsStorage',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'newsStorage', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"owner"`.
 */
export function useSnewsOwner<
  TSelectData = ReadContractResult<typeof snewsABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useSnewsOwnerOf<
  TSelectData = ReadContractResult<typeof snewsABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"resolver"`.
 */
export function useSnewsResolver<
  TSelectData = ReadContractResult<typeof snewsABI, 'resolver'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'resolver', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'resolver',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'resolver', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"slugStorage"`.
 */
export function useSnewsSlugStorage<
  TSelectData = ReadContractResult<typeof snewsABI, 'slugStorage'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'slugStorage', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'slugStorage',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'slugStorage', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useSnewsSupportsInterface<
  TSelectData = ReadContractResult<typeof snewsABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'supportsInterface', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"symbol"`.
 */
export function useSnewsSymbol<
  TSelectData = ReadContractResult<typeof snewsABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useSnewsTokenUri<
  TSelectData = ReadContractResult<typeof snewsABI, 'tokenURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'tokenURI', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"tokenWithDrawalNonces"`.
 */
export function useSnewsTokenWithDrawalNonces<
  TSelectData = ReadContractResult<typeof snewsABI, 'tokenWithDrawalNonces'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof snewsABI,
      'tokenWithDrawalNonces',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'tokenWithDrawalNonces',
    ...config,
  } as UseContractReadConfig<
    typeof snewsABI,
    'tokenWithDrawalNonces',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"userClaimNews"`.
 */
export function useSnewsUserClaimNews<
  TSelectData = ReadContractResult<typeof snewsABI, 'userClaimNews'>,
>(
  config: Omit<
    UseContractReadConfig<typeof snewsABI, 'userClaimNews', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: snewsABI,
    functionName: 'userClaimNews',
    ...config,
  } as UseContractReadConfig<typeof snewsABI, 'userClaimNews', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__.
 */
export function useSnewsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof snewsABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, TFunctionName>({
    abi: snewsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"__Snews_init"`.
 */
export function useSnewsSnewsInit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, '__Snews_init'>['abi'],
        '__Snews_init'
      > & { functionName?: '__Snews_init' }
    : UseContractWriteConfig<TMode, typeof snewsABI, '__Snews_init'> & {
        abi?: never
        functionName?: '__Snews_init'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, '__Snews_init'>({
    abi: snewsABI,
    functionName: '__Snews_init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"approve"`.
 */
export function useSnewsApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof snewsABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, 'approve'>({
    abi: snewsABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"approveWriterRole"`.
 */
export function useSnewsApproveWriterRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, 'approveWriterRole'>['abi'],
        'approveWriterRole'
      > & { functionName?: 'approveWriterRole' }
    : UseContractWriteConfig<TMode, typeof snewsABI, 'approveWriterRole'> & {
        abi?: never
        functionName?: 'approveWriterRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, 'approveWriterRole'>({
    abi: snewsABI,
    functionName: 'approveWriterRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"claimToken"`.
 */
export function useSnewsClaimToken<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, 'claimToken'>['abi'],
        'claimToken'
      > & { functionName?: 'claimToken' }
    : UseContractWriteConfig<TMode, typeof snewsABI, 'claimToken'> & {
        abi?: never
        functionName?: 'claimToken'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, 'claimToken'>({
    abi: snewsABI,
    functionName: 'claimToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"createNews"`.
 */
export function useSnewsCreateNews<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, 'createNews'>['abi'],
        'createNews'
      > & { functionName?: 'createNews' }
    : UseContractWriteConfig<TMode, typeof snewsABI, 'createNews'> & {
        abi?: never
        functionName?: 'createNews'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, 'createNews'>({
    abi: snewsABI,
    functionName: 'createNews',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useSnewsGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof snewsABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, 'grantRole'>({
    abi: snewsABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useSnewsOnErc721Received<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, 'onERC721Received'>['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<TMode, typeof snewsABI, 'onERC721Received'> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, 'onERC721Received'>({
    abi: snewsABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useSnewsRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof snewsABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, 'renounceOwnership'>({
    abi: snewsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useSnewsRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof snewsABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, 'renounceRole'>({
    abi: snewsABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useSnewsRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof snewsABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, 'revokeRole'>({
    abi: snewsABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useSnewsSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof snewsABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, 'safeTransferFrom'>({
    abi: snewsABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useSnewsSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof snewsABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, 'setApprovalForAll'>({
    abi: snewsABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"setSigner"`.
 */
export function useSnewsSetSigner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, 'setSigner'>['abi'],
        'setSigner'
      > & { functionName?: 'setSigner' }
    : UseContractWriteConfig<TMode, typeof snewsABI, 'setSigner'> & {
        abi?: never
        functionName?: 'setSigner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, 'setSigner'>({
    abi: snewsABI,
    functionName: 'setSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useSnewsTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof snewsABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, 'transferFrom'>({
    abi: snewsABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useSnewsTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof snewsABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof snewsABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof snewsABI, 'transferOwnership'>({
    abi: snewsABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__.
 */
export function usePrepareSnewsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"__Snews_init"`.
 */
export function usePrepareSnewsSnewsInit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, '__Snews_init'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    functionName: '__Snews_init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, '__Snews_init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareSnewsApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"approveWriterRole"`.
 */
export function usePrepareSnewsApproveWriterRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, 'approveWriterRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    functionName: 'approveWriterRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, 'approveWriterRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"claimToken"`.
 */
export function usePrepareSnewsClaimToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, 'claimToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    functionName: 'claimToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, 'claimToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"createNews"`.
 */
export function usePrepareSnewsCreateNews(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, 'createNews'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    functionName: 'createNews',
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, 'createNews'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareSnewsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareSnewsOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareSnewsRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareSnewsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareSnewsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareSnewsSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareSnewsSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"setSigner"`.
 */
export function usePrepareSnewsSetSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, 'setSigner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    functionName: 'setSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, 'setSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareSnewsTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link snewsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareSnewsTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof snewsABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: snewsABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof snewsABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link snewsABI}__.
 */
export function useSnewsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof snewsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: snewsABI,
    ...config,
  } as UseContractEventConfig<typeof snewsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link snewsABI}__ and `eventName` set to `"Approval"`.
 */
export function useSnewsApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof snewsABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: snewsABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof snewsABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link snewsABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useSnewsApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof snewsABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: snewsABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof snewsABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link snewsABI}__ and `eventName` set to `"ClaimToken"`.
 */
export function useSnewsClaimTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof snewsABI, 'ClaimToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: snewsABI,
    eventName: 'ClaimToken',
    ...config,
  } as UseContractEventConfig<typeof snewsABI, 'ClaimToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link snewsABI}__ and `eventName` set to `"CreateNews"`.
 */
export function useSnewsCreateNewsEvent(
  config: Omit<
    UseContractEventConfig<typeof snewsABI, 'CreateNews'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: snewsABI,
    eventName: 'CreateNews',
    ...config,
  } as UseContractEventConfig<typeof snewsABI, 'CreateNews'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link snewsABI}__ and `eventName` set to `"Initialized"`.
 */
export function useSnewsInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof snewsABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: snewsABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof snewsABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link snewsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useSnewsOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof snewsABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: snewsABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof snewsABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link snewsABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useSnewsRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof snewsABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: snewsABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof snewsABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link snewsABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useSnewsRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof snewsABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: snewsABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof snewsABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link snewsABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useSnewsRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof snewsABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: snewsABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof snewsABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link snewsABI}__ and `eventName` set to `"Transfer"`.
 */
export function useSnewsTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof snewsABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: snewsABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof snewsABI, 'Transfer'>)
}
